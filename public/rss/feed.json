{
    "version": "https://jsonfeed.org/version/1",
    "title": "Irsyad A. Panjaitan",
    "feed_url": "undefined/rss/feed.json",
    "description": "Your blog description",
    "icon": "undefined/favicon.ico",
    "author": {
        "name": "Irsyad A. Panjaitan"
    },
    "items": [
        {
            "id": "undefined/articles/scaffolding-laravel-with-inertia-react-and-typescript",
            "content_html": "<p>I&#x27;ve recently been working on a project that uses Laravel Inertia and React with Typescript. So I decided to write a repo that can be used as a scaffolding for future projects.</p>\n<h2>The Project</h2>\n<p>If you go to the <a href=\"https://inertiajs.com/\">Laravel Inertia website</a>, you&#x27;ll see that they have a support for React, Vue, and Svelte. But when you use laravel breeze as a scaffolding, it only supports React with <code>.jsx</code> and not <code>.tsx</code>.</p>\n<p>If you want to use Typescript, you&#x27;ll need to do some extra work to make it work. Now with this repo, you can just clone it and start working on your project.</p>\n<p>Here&#x27;s the preview of the project:</p>\n<img alt=\"Screenshot project\" srcSet=\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscreenshot-project.81022a03.png&amp;w=3840&amp;q=75 1x\" src=\"/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fscreenshot-project.81022a03.png&amp;w=3840&amp;q=75\" width=\"2560\" height=\"1440\" decoding=\"async\" data-nimg=\"1\" loading=\"lazy\" style=\"color:transparent\"/>\n<h2>The Repo</h2>\n<p>You can find the repo here: <a href=\"https://github.com/irsyadadl/inertia.ts/\">irsyadadl/inertia.ts</a>, there are some instructions on how to use it. I hope this can help you in your project.</p>\n<h3>tl;dr</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/irsyadadl/inertia.ts.git <span class=\"token string\">&#x27;project&#x27;</span>\n<span class=\"token builtin class-name\">cd</span> project\n<span class=\"token function\">composer</span> <span class=\"token function\">install</span>\n<span class=\"token function\">cp</span> .env.example .env\nphp artisan key:generate\n<span class=\"token function\">npm</span> i <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> run build\n</code></pre>\n<p>This project is still in development, so if you have any suggestions, feel free to open an issue or a PR.</p>\n<h2>The Features</h2>\n<p>This project has came with some features that I think is useful for most projects, but you can always remove it if you don&#x27;t need it.</p>\n<ul>\n<li>Authentication</li>\n<li>User Avatar</li>\n<li>User Profile Settings</li>\n<li>User Password Settings</li>\n<li>Delete Account</li>\n<li>Privacy Policy</li>\n<li>Terms of Service</li>\n<li>About Page</li>\n</ul>\n<h2>Components and Hooks</h2>\n<p>I&#x27;ve also created some components and hooks like <code>useRoute</code>, <code>useTypedPage.ts</code> that can be used in your project. Maybe you&#x27;ll think why I didn&#x27;t use <code>usePage</code> from <code>@inertiajs/inertia-react</code>? Well, I think it&#x27;s better to use <code>useTypedPage</code> because it has a type for the page props.\nSo you don&#x27;t need to define the type for the page props in every page.</p>\n<p>Also if you import the route from <code>ziggy-js</code>, it will crash on the ssr mode. So I&#x27;ve created <code>useRoute</code> that can be used to get the route name and params.</p>\n<p>To use it, you can just import it like this:</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">useRoute</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;@/hooks/useRoute&#x27;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">SomeComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;profile.edit&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token plain-text\">Edit profile</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>And the <code>useTypedPage</code> is just a wrapper for <code>usePage</code> that has a type for the page props.</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">useTypedPage</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">&#x27;@/hooks/useTypedPage&#x27;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">SomeComponent</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useTypedPage</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> canViewThisPage<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> canViewThisPage<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>I hope this can help you in your project. If you have any suggestions, feel free to open an issue or a PR.</p>",
            "url": "undefined/articles/scaffolding-laravel-with-inertia-react-and-typescript",
            "title": "Scaffolding Laravel Inertia And React With Typescript",
            "summary": "Most companies try to stay ahead of the curve when it comes to visual design, but for Planetaria we needed to create a brand that would still inspire us 100 years from now when humanity has spread across our entire solar system.",
            "date_modified": "2023-02-20T00:00:00.000Z",
            "author": {
                "name": "Irsyad A. Panjaitan"
            }
        },
        {
            "id": "undefined/articles/powerful-vs-code-extensions",
            "content_html": "<p>in this article, we will discuss some powerful extensions in visual studio code. Let&#x27;s get started.</p>\n<h3>Prettier</h3>\n<p>Prettier is an extension used to format several languages, including JavaScript, TypeScript, Flow, Jsx, Json, Css, Scss, Less, Html, Vue, Angular, Ember, Glimmer GraphQL, Markdown, Yaml and more. You can install the package <a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">here</a>.</p>\n<h3>PHP Class Create</h3>\n<p>Maybe you often create PHP classes by creating a new file, then create the class or namespace manually, but if there is an easier way why not try using the <a href=\"https://marketplace.visualstudio.com/items?itemName=jaguadoromero.vscode-php-create-class\">PHP Create Class extension</a>. And now, you can create <code>trait</code>, <code>enum</code>, <code>class</code> by using this package.</p>\n<h3>PHP Testing</h3>\n<p>If you use PHPUnit a lot, then <a href=\"https://marketplace.visualstudio.com/items?itemName=calebporzio.better-phpunit\">Better PHPUnit</a> is the answer. But if you are a Pest user, then <a href=\"https://marketplace.visualstudio.com/items?itemName=m1guelpf.better-pest\">Better Pest</a> is the tool for you.</p>\n<h3>General Extensions</h3>\n<p>Here is a list of some extensions that are generally a must-have.</p>\n<ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=liamhammett.inline-parameters\">Inline Parameters</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=patbenatar.advanced-new-file\">advanced-new-file</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag\">Auto Rename Tag</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=flydreame.docblocker\">DocBlocker</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss\">Tailwind CSS IntelliSense</a></li>\n</ol>\n<h3>Extensions for PHP Developers</h3>\n<ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client\">PHP Intelephense</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=MehediDracula.php-namespace-resolver\">PHP Namespace Resolver</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=jaguadoromero.vscode-php-create-class\">PHP Create Class</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=m1guelpf.better-pest\">Better Pest</a> or <a href=\"https://marketplace.visualstudio.com/items?itemName=calebporzio.better-phpunit\">Better PHPUnit</a></li>\n</ol>\n<h3>Extensions for Laravel Developers</h3>\n<p>If you are a Laravel developer, then some of the extensions below will be very helpful.</p>\n<ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=amiralizadeh9480.laravel-extra-intellisense\">Laravel Extra Intellisense</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ryannaddy.laravel-artisan\">Laravel Artisan</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=austenc.laravel-blade-spacer\">Laravel Blade Spacer</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=onecentlin.laravel-blade\">Laravel Blade Snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=shufo.vscode-blade-formatter\">Laravel Blade Formatter</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments\">Better Comments</a></li>\n</ol>\n<h3>Extensions for Javascript Developers</h3>\n<ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=jasonnutter.search-node-modules\">Search node_modules</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=CoachRichbart.better-jest\">Better Jest</a></li>\n</ol>\n<h3>Extensions for React Developers</h3>\n<ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets\">ES7 React Snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=planbcoding.vscode-react-refactor\">VSCode React Refactor</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=riazxrazor.html-to-jsx\">HTML to JSX</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=leodriesch.paste-html-as-jsx\">Paste HTML as JSX</a></li>\n</ol>\n<h3>Extensions for Vue Developers</h3>\n<ol>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=vue.volar\">Vue Language Features</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=octref.vetur\">Vetur</a></li>\n</ol>\n<p>Hopefully some of the extensions above can help you in working on future projects or those that are currently being worked on. I am Irsyad, see you soon.</p>",
            "url": "undefined/articles/powerful-vs-code-extensions",
            "title": "Powerful VSCode Extensions",
            "summary": "In this article, we will discuss some powerful extensions in visual studio code. Let's get started.",
            "date_modified": "2022-09-06T00:00:00.000Z",
            "author": {
                "name": "Irsyad A. Panjaitan"
            }
        },
        {
            "id": "undefined/articles/3-frequently-used-laravel-routing-methods",
            "content_html": "<p>Show data with the default properties you want, not only that. Scope can also help us in making our code more readable.Routing is a fundamental feature in creating applications using the Laravel framework, so here we will discuss some features that you can do when you want to create routes.</p>\n<h2>Route Resource &amp; Api Resource</h2>\n<p>This route is usually used to create CRUD (Create, Read, Update, Destroy). So instead of defining routes one by one, it&#x27;s better to group them into resources.</p>\n<p>When we use a resource, it will automatically generate 7 urls and methods on the <em>controller</em> that you are aiming for.\nIn this example, we will create a <em>controller</em> for <code>Post</code>.\n``php\nRoute::resource(&#x27;posts&#x27;, PostController::class);</p>\n<pre><code>Then, if you list the route specifically on the `posts`, then you should see this.\n```bash\nartisan route:list --name=posts\n...\nGET|HEAD    posts ...  posts.index › PostController@index\nPOST        posts ... posts.store › PostController@store\nGET|HEAD    posts/create ... posts.create › PostController@create\nGET|HEAD    posts/{post} ... posts.show › PostController@show\nPUT|PATCH   posts/{post} ... posts.update › PostController@update\nDELETE      posts/{post} ... posts.destroy › PostController@destroy\nGET|HEAD    posts/{post}/edit ... posts.edit › PostController@edit\n</code></pre>\n<p>Now, then, if you want to create the controller, it&#x27;s easy by flagging <code>-model=[]</code> like <code>artisan make:controller PostController --model=Post</code>.</p>\n<p>Okay, now let&#x27;s talk about Api Resource, actually it&#x27;s not that different, if we create <code>Route::apiResource()</code> it will generate 5 methods only, without <code>create</code> and <code>edit</code>.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">apiResource</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;posts&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token scope\">PostController<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Then, if we want the controller generation, don&#x27;t forget to add the api flag as well like <code>artisan make:controller PostController --model=Post --api</code>.</p>\n<h2>Route Group</h2>\n<p>For this technique, you might have used it many times, because it is also commonly used to group routes for example in middleware, namespace, controller, name, namespace, etc.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;auth&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;dashboard&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token scope\">DashboardController<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;account/edit&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token scope\">ProfileInformationController<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">&#x27;edit&#x27;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;account/edit&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token scope\">ProfileInformationController<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">&#x27;update&#x27;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;guest&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;login&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token scope\">LoginController<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;register&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token scope\">RegisterController<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2>Route Controller</h2>\n<p>If you have created repeated routes with the same <code>controller</code>, then you can now group them by grouping them by controller.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\"># Before</span>\n<span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;account/edit&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token scope\">AccountController<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">&#x27;edit&#x27;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;account/edit&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token scope\">AccountController<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">&#x27;update&#x27;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;password/edit&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token scope\">AccountController<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">&#x27;editPassword&#x27;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;password&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token scope\">AccountController<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">&#x27;updatePassword&#x27;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># After</span>\n<span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">controller</span><span class=\"token punctuation\">(</span><span class=\"token scope\">AccountController<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;account/edit&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">&#x27;edit&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;account/edit&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">&#x27;update&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;password/edit&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">&#x27;editPassword&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token scope\">Route<span class=\"token punctuation\">::</span></span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;password&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">&#x27;updatePassword&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Well, that&#x27;s all for this article, hopefully this can be useful.</p>",
            "url": "undefined/articles/3-frequently-used-laravel-routing-methods",
            "title": "3 Frequently Used Laravel Routing Methods",
            "summary": "Routing is a fundamental feature in creating applications using the Laravel framework, so here we will discuss some features that you can do when you want to create routes.",
            "date_modified": "2022-08-19T00:00:00.000Z",
            "author": {
                "name": "Irsyad A. Panjaitan"
            }
        },
        {
            "id": "undefined/articles/the-difference-between-for-each-and-map-in-java-script",
            "content_html": "<p>If you&#x27;ve been playing around with JavaScript lately, you might have come across two Array methods that seem to function the same.</p>\n<h3>Array.prototype.forEach() - forEach</h3>\n<p>According to <a href=\"https://developer.mozilla.org/en-US/\">MDN</a>, The forEach() method will execute the provided function once for each element of the array.</p>\n<p>In short, use <code>forEach</code>, if you <strong>do not want</strong> to manipulate the original data, or the output of the array.</p>\n<p>Because basically, this method doesn&#x27;t return anything, yep, it doesn&#x27;t return anything, but it will just call the provided function on each element in the array that we have.</p>\n<p>Here is an example of its use.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;Irsyad&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;A. Panjaitan&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;Alex&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;Smith&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">29</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;Sri&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;A. Rahayu&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nusers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">firstname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// expected output: &#x27;Irsyad&#x27;</span>\n<span class=\"token comment\">// expected output: &#x27;Alex&#x27;</span>\n<span class=\"token comment\">// expected output: &#x27;Sri&#x27;</span>\n</code></pre>\n<h3>Array.prototype.map() - Map</h3>\n<p>According to <a href=\"https://developer.mozilla.org/en-US/\">MDN</a>, The map() method creates a new array filled with the results of the provided function call on each return element in the array.</p>\n<p>In short, use <code>map</code> if you <strong>want</strong> to change the data obtained from the array.</p>\n<p>Consider the following array.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;Irsyad&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;A. Panjaitan&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;Alex&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;Smith&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">29</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">firstname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;Sri&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">lastname</span><span class=\"token operator\">:</span> <span class=\"token string\">&#x27;A. Rahayu&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>If you look at the array above, each of them has keys named <code>firstname</code> and <code>lastname</code>. What if we combine <code>firstname</code> and <code>lastname</code> into <code>name</code>.</p>\n<p>Take a look at the following example.</p>\n<pre class=\"language-js\"><code class=\"language-js\">users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">firstname</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">lastname</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token property-access\">age</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n expected output: Array [\n  { name: &#x27;Irsyad A. Panjaitan&#x27;, age: 25 },\n  { name: &#x27;Alex Smith&#x27;, age: 29 },\n  { name: &#x27;Sri A. Rahayu&#x27;, age: 26 }\n]\n*/</span>\n</code></pre>\n<p>If we look, from the output, it is clear that they are different, <code>map</code> returns an array back, while <code>forEach</code> does not.</p>\n<p>Here is another example.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// expected output: 10</span>\n<span class=\"token comment\">// expected output: 15</span>\n<span class=\"token comment\">// expected output: 20</span>\n<span class=\"token comment\">// expected output: 25</span>\n</code></pre>\n<p>If we use map, then what is returned is data in the form of an array.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> number <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: Array [ 10, 15, 20, 25 ]</span>\n</code></pre>\n<p>It&#x27;s clear the difference between the two functions, <strong>map</strong> will return an array back, while <strong>forEach</strong> will not.</p>\n<p>Hopefully this article is useful, like if you like, share if you like sharing.</p>",
            "url": "undefined/articles/the-difference-between-for-each-and-map-in-java-script",
            "title": "The Difference Between ForEach and Map in JavaScript",
            "summary": "If you've been playing around with JavaScript lately, you might have come across two Array methods that seem to function the same.",
            "date_modified": "2022-07-25T00:00:00.000Z",
            "author": {
                "name": "Irsyad A. Panjaitan"
            }
        },
        {
            "id": "undefined/articles/writing-more-readable-code-with-scope",
            "content_html": "<p>Show data with the default properties you want, not only that. Scope can also help us in making our code more readable.</p>\n<p>Before we start, I will first show you the difference between before and after.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Before</span>\n<span class=\"token scope\">Article<span class=\"token punctuation\">::</span></span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;user_id&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$request</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;status&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token scope\">ArticleStatus<span class=\"token punctuation\">::</span></span><span class=\"token constant\">PUBLISHED</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// After</span>\n<span class=\"token scope\">Article<span class=\"token punctuation\">::</span></span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">wherePublishedAndBelongsToMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Since I am modelling with an article, we will assume that there is a status on the article. Like for example <code>unpublished</code> and <code>published</code>. So if you look at the example above, it just uses an enum from PHP. More or less the enum is like this.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">enum</span> <span class=\"token class-name-definition class-name\">ArticleStatus</span><span class=\"token punctuation\">:</span> <span class=\"token keyword type-declaration\">int</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">UNPUBLISHED</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">PREVIEW</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">PUBLISHED</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Now, open the article model and add 3 methods in it with <code>scopeNameOfFunction</code> prefix like:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Enums<span class=\"token punctuation\">\\</span>ArticleStatus</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Illuminate<span class=\"token punctuation\">\\</span>Contracts<span class=\"token punctuation\">\\</span>Database<span class=\"token punctuation\">\\</span>Query<span class=\"token punctuation\">\\</span>Builder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Article</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">scopeWherePublished</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Builder</span> <span class=\"token variable\">$builder</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> <span class=\"token variable\">$builder</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;status&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token scope\">ArticleStatus<span class=\"token punctuation\">::</span></span><span class=\"token constant\">PUBLISHED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">scopeWhereBelongsToMe</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Builder</span> <span class=\"token variable\">$builder</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$builder</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">whereBelongsTo</span><span class=\"token punctuation\">(</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?-&gt;</span><span class=\"token function\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">scopeWherePublishedAndBelongsToMe</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Builder</span> <span class=\"token variable\">$builder</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$builder</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">wherePublished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">whereBelongsToMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>After that, you can use it like the example above, only for the <code>scopeWhereBelongsToMe</code> method there is a little exception. Make sure if you want to use it it is right on the page that has been protected by <code>middleware auth</code>. That&#x27;s just an example, of course you can create whatever you want.</p>\n<p>Well for how to use it it&#x27;s very easy, if we need one that only has <code>published</code> status, then we can do it like:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token scope\">Article<span class=\"token punctuation\">::</span></span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">wherePublished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>And if you want to display everything related to the logged in user and don&#x27;t care about the status, you can do it like:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token scope\">Article<span class=\"token punctuation\">::</span></span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">whereBelongsToMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>And of course, if you want both, it would be like:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token scope\">Article<span class=\"token punctuation\">::</span></span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">whereBelongsToMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">wherePublished</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Or put together with the prefix <code>and</code> like:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token scope\">Article<span class=\"token punctuation\">::</span></span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">wherePublishedAndBelongsToMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>More or less for such <code>scope</code> usage. But the scope we did above is still called local scope. Why is that? Because there is actually a way to scope globally. So the scope is applied by default.</p>\n<h3>Global Scope</h3>\n<p>Now we will give you an example. Open your terminal and run the artisan command to create a scope like:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">php artisan make:scope PublishedScope\n</code></pre>\n<p>After that, it will create us a folder <code>Scopes</code> with the file <code>ArticleScope.php</code> inside. Look for the file right inside the <code>app/Models/Scopes/ArticleScope.php</code> directory. Remember, that this class only contains one method, <code>apply</code>, so if you try to create one more method under it, it will error. Because this class itself is implemented with <code>interface Scope</code> which contains only 1 method like:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Builder</span> <span class=\"token variable\">$builder</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">Model</span> <span class=\"token variable\">$model</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Now, you can enter the query you want to create right into that <code>apply</code> method like:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">PublishedScope</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Scope</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Builder</span> <span class=\"token variable\">$builder</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">Model</span> <span class=\"token variable\">$model</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$builder</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;status&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token scope\">ArticleStatus<span class=\"token punctuation\">::</span></span><span class=\"token constant\">PUBLISHED</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">latest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Next you can register that scope globally right on the model that needs it.</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Article</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * The &quot;booted&quot; method of the model.\n     *\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token keyword\">void</span></span>\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">booted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token scope\"><span class=\"token keyword\">static</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">addGlobalScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PublishedScope</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>If the user model also needs that scope, then you can also stick it in there like:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * The &quot;booted&quot; method of the model.\n     *\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\"><span class=\"token keyword\">void</span></span>\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">booted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token scope\"><span class=\"token keyword\">static</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">addGlobalScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PublishedScope</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3>Anonymous Global Scopes</h3>\n<p>If you don&#x27;t want to create it outside of the model, you can use an <em>anonymous global scope</em> like:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Model</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">booted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token scope\"><span class=\"token keyword\">static</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">addGlobalScope</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;published&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Builder</span> <span class=\"token variable\">$builder</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token variable\">$builder</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;status&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token scope\">Article<span class=\"token punctuation\">::</span></span><span class=\"token constant\">PUBLISHED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3>Without Global Scope</h3>\n<p>Sometimes we don&#x27;t want to use this scope, for example we want to display all articles regardless of their status. Then it can be prevented by adding a <code>withoutGlobalScope</code> method such as:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token scope\">Article<span class=\"token punctuation\">::</span></span><span class=\"token function\">withoutGlobalScope</span><span class=\"token punctuation\">(</span><span class=\"token scope\">PublishedScope<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Or if you are using an <em>anonymous global scope</em> you can directly enter the name like:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token scope\">Article<span class=\"token punctuation\">::</span></span><span class=\"token function\">withoutGlobalScope</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">&#x27;published&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Hope this article is useful. Until next time 👋🏻</p>",
            "url": "undefined/articles/writing-more-readable-code-with-scope",
            "title": "Writing More Readable Code With Scope in Laravel",
            "summary": "Show data with the default properties you want, not only that. Scope can also help us in making our code more readable.",
            "date_modified": "2022-06-25T00:00:00.000Z",
            "author": {
                "name": "Irsyad A. Panjaitan"
            }
        },
        {
            "id": "undefined/articles/this-new-function-in-laravel-is-really-great",
            "content_html": "<p>Recently <a href=\"https://github.com/timacdonald\">Tim MacDonald</a> has contributed to creating a <code>fake()</code> function that can be used globally. Using this function, we can easily prototype, test, and generate data.</p>\n<p>Here I will directly model it for users. Remember, there is no such thing as a table setup, let alone a factory.</p>\n<pre class=\"language-html\"><code class=\"language-html\">@for ($i = 0; $i &lt; 10; $i++)\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Name: {{ fake()-&gt;name() }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Email: {{ fake()-&gt;email() }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">&gt;</span></span>Phone: {{ fake()-&gt;phoneNumber() }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">&gt;</span></span>\n@endfor\n</code></pre>\n<p>Or for example &quot;single record&quot;:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">&gt;</span></span>{{ str(fake()-&gt;sentence())-&gt;title() }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n        @foreach (fake()-&gt;paragraphs(12) as $item)\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>{{ $item }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n        @endforeach\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>Hopefully, this information will be useful.</p>",
            "url": "undefined/articles/this-new-function-in-laravel-is-really-great",
            "title": "This New Function In Laravel Is Really Great",
            "summary": "Recently Tim MacDonald has contributed to creating a fake() function that can be used globally.",
            "date_modified": "2022-06-24T00:00:00.000Z",
            "author": {
                "name": "Irsyad A. Panjaitan"
            }
        }
    ]
}
